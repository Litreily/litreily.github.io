<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LITREILY</title>
  <icon>https://www.gravatar.com/avatar/6ae20d989e9d976faf00ecc6d9bcfe82</icon>
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="https://www.litreily.top/atom.xml" rel="self"/>
  
  <link href="https://www.litreily.top/"/>
  <updated>2024-02-05T08:40:35.944Z</updated>
  <id>https://www.litreily.top/</id>
  
  <author>
    <name>litreily</name>
    <email>707922098@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RK3288 Android6 新增分区</title>
    <link href="https://www.litreily.top/2024/02/05/rk32-new-part/"/>
    <id>https://www.litreily.top/2024/02/05/rk32-new-part/</id>
    <published>2024-02-05T08:38:12.000Z</published>
    <updated>2024-02-05T08:40:35.944Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;特定情况下需要新增分区，比如开辟一个分区专门用于保存系统日志，恢复出厂默认时不会被清理. 以新增slog分区为例，说明RK3288 Android6新增分区的方法。&lt;/p&gt;
&lt;h2 id=&quot;代码结构&quot;&gt;&lt;a href=&quot;#代码结构&quot; class=&quot;headerlink&quot; title=&quot;代码结构&quot;&gt;&lt;/a&gt;代码结构&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;# package-file
FFTools/mkupdate/package-file

# 分区表
FFTools/parameter/rk3288-3.10-uboot-android.parameter.txt

# 开机自动挂载相关
device/rockchip/rk3288/
|-- fstab.rk30board.bootmode.emmc
|-- init.rc
`-- slog
    `-- README.md

# 创建 slog.img
mkimage.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;新增分区&quot;&gt;&lt;a href=&quot;#新增分区&quot; class=&quot;headerlink&quot; title=&quot;新增分区&quot;&gt;&lt;/a&gt;新增分区&lt;/h2&gt;&lt;h3 id=&quot;修改</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android6 禁用 wifi</title>
    <link href="https://www.litreily.top/2024/01/10/rk32-disable-wifi/"/>
    <id>https://www.litreily.top/2024/01/10/rk32-disable-wifi/</id>
    <published>2024-01-10T08:55:19.000Z</published>
    <updated>2024-02-05T09:15:43.094Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;某些特殊情况下，需要禁用系统的wifi配置功能。&lt;/p&gt;
&lt;h2 id=&quot;删除快捷-wifi-开关&quot;&gt;&lt;a href=&quot;#删除快捷-wifi-开关&quot; class=&quot;headerlink&quot; title=&quot;删除快捷 wifi 开关&quot;&gt;&lt;/a&gt;删除快捷 wifi 开关&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;frameworks/base&lt;/code&gt; 中的 &lt;code&gt;SystemUI&lt;/code&gt; app 中禁用wifi开关，只需要修改配置 &lt;code&gt;quick_settings_tiles_default&lt;/code&gt; 即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;patch&quot;&gt;--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -119,7 +119,7 @@
     &amp;lt;!-- The default tiles to display in QuickSettings --&amp;gt;
     &amp;lt;string name=&amp;quot;quick_settings_tiles_default&amp;quot; translatable=&amp;quot;false&amp;quot;&amp;gt;
-        wifi,bt,inversion,dnd</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>RK3399 Android10 bind cpu with isolcpus</title>
    <link href="https://www.litreily.top/2023/12/06/isolcpus/"/>
    <id>https://www.litreily.top/2023/12/06/isolcpus/</id>
    <published>2023-12-06T07:29:46.000Z</published>
    <updated>2023-12-06T08:48:22.093Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;Per new request to bind cpus for some special processes, we need isolate some cpus of RK3399, which only used for thes special processes.&lt;/p&gt;
&lt;p&gt;we can update dts file to set &lt;code&gt;isolcpus&lt;/code&gt; arg in &lt;code&gt;bootargs&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;set-isolcpus&quot;&gt;&lt;a href=&quot;#set-isolcpus&quot; class=&quot;headerlink&quot; title=&quot;set isolcpus&quot;&gt;&lt;/a&gt;set isolcpus&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;diff --git a/arch/arm64/boot/dts/rockchip/rk3399-android.dtsi b/arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
index 76753a9..a2a3206 100644
--- a/arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
+++ b/arch/arm64/boot/dts/rockchip/rk</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="andorid" scheme="https://www.litreily.top/tags/andorid/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android 10 系统开发[6] - 新增lunch</title>
    <link href="https://www.litreily.top/2023/04/17/android-lunch/"/>
    <id>https://www.litreily.top/2023/04/17/android-lunch/</id>
    <published>2023-04-17T12:47:59.000Z</published>
    <updated>2023-04-17T13:02:06.605Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;如果要新增产品，在Android sdk中可以新增lunch进行适配。以 rk3288 产品为例，新增 rk3288_tablet.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先从已有的 &lt;code&gt;rk3288_Android10&lt;/code&gt; 拷贝一份到新增的 &lt;code&gt;rk3288_tablet&lt;/code&gt; 目录；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cd &amp;lt;SDK&amp;gt;/device/rockchip/rk3288
cp -rf rk3288_Android10 rk3288_tablet
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;然后修改 &lt;code&gt;device/rockchip/rk3288/AndroidProducts.mk&lt;/code&gt; 文件，添加新产品配置&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;patch&quot;&gt;--- a/AndroidProducts.mk
+++ b/AndroidProducts.mk
@@ -16,8 +16,11 @@
                                                                                                           
 PRODUCT_MAK</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android 系统 boot.img 镜像解压方法</title>
    <link href="https://www.litreily.top/2023/01/19/binwalk/"/>
    <id>https://www.litreily.top/2023/01/19/binwalk/</id>
    <published>2023-01-19T02:38:26.000Z</published>
    <updated>2023-01-19T07:21:22.151Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;android-6-0-boot-img-解包&quot;&gt;&lt;a href=&quot;#android-6-0-boot-img-解包&quot; class=&quot;headerlink&quot; title=&quot;android 6.0 boot.img 解包&quot;&gt;&lt;/a&gt;android 6.0 boot.img 解包&lt;/h2&gt;&lt;h3 id=&quot;file&quot;&gt;&lt;a href=&quot;#file&quot; class=&quot;headerlink&quot; title=&quot;file&quot;&gt;&lt;/a&gt;file&lt;/h3&gt;&lt;p&gt;file指令可以显示文件类型，但是对于特定封装的文件无能为力，比如Android系统编译出的&lt;code&gt;boot.img&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ file boot.img
boot.img: data
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android 10 系统开发[5] - 解决wifi mac随机问题</title>
    <link href="https://www.litreily.top/2022/12/07/rand-mac/"/>
    <id>https://www.litreily.top/2022/12/07/rand-mac/</id>
    <published>2022-12-07T07:45:04.000Z</published>
    <updated>2022-12-07T08:23:42.354Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;在Android10的使用过程中，由于业务要求使用wifi mac地址作为设备的 &lt;code&gt;SN&lt;/code&gt; ，所以要求mac地址必须是唯一且固定的。然而测试发现在wifi 连接过程中会出现短暂时间的随机mac，wifi连接成功后保持稳定。&lt;/p&gt;
&lt;h2 id=&quot;Android-官方解释&quot;&gt;&lt;a href=&quot;#Android-官方解释&quot; class=&quot;headerlink&quot; title=&quot;Android 官方解释&quot;&gt;&lt;/a&gt;Android 官方解释&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/android/rand-mac.png&quot; alt=&quot;rand mac&quot;&gt;&lt;/p&gt;
&lt;p&gt;从官方解析来看，高版本安卓系统为了安全考虑，支持随机分配wifi mac.&lt;/p&gt;
&lt;p&gt;但是要支持的话需要修改以下参数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;frameworks/base/core/res/res/values/config.xml
- config_wifi_connected_mac_randomization_supported
- config_wifi_p2p_mac_randomization_supported
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是这两个参数默认已经配置为 &lt;code&gt;false&lt;/code&gt; 了。只能换个方向查。&lt;</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android 6.0 logcat 过滤带冒号的 tag</title>
    <link href="https://www.litreily.top/2022/11/06/logcat-arg/"/>
    <id>https://www.litreily.top/2022/11/06/logcat-arg/</id>
    <published>2022-11-06T10:32:20.000Z</published>
    <updated>2022-12-07T08:23:57.410Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;logcat-过滤&quot;&gt;&lt;a href=&quot;#logcat-过滤&quot; class=&quot;headerlink&quot; title=&quot;logcat 过滤&quot;&gt;&lt;/a&gt;logcat 过滤&lt;/h2&gt;&lt;p&gt;logcat 过滤不打印的日志时，可以使用 &lt;code&gt;&amp;lt;tag&amp;gt;:S&lt;/code&gt; 的参数，比如排除 ActivityManager 相关日志。使用 以下指令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;logcat ActivityManager:S
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是我遇到一种特殊情况，应用app的tag中包含了冒号，比如 &lt;code&gt;APP:SDK--&lt;/code&gt;, 其它类似的tag有很多，这种情况使用以下指令是无法过滤掉的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;logcat APP:SDK--:S
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了分析原因，需要查看 &lt;code&gt;logcat&lt;/code&gt; 源码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;system/core/logcat/logcat.cpp
system/core/liblog/logprint.c
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;logcat-cpp&quot;&gt;&lt;a href=&quot;#logcat-cpp&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android 10 系统开发[4] - 提供 app 默认权限</title>
    <link href="https://www.litreily.top/2022/07/12/android-perm/"/>
    <id>https://www.litreily.top/2022/07/12/android-perm/</id>
    <published>2022-07-12T09:49:46.000Z</published>
    <updated>2022-07-12T10:20:53.050Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;禁用旧版本SDK弹框&quot;&gt;&lt;a href=&quot;#禁用旧版本SDK弹框&quot; class=&quot;headerlink&quot; title=&quot;禁用旧版本SDK弹框&quot;&gt;&lt;/a&gt;禁用旧版本SDK弹框&lt;/h2&gt;&lt;p&gt;如果在Android10系统上安装旧版本的app，会提示以下信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此应用专为旧版 Android 打造，因此可能无法正常运行。请尝试检查更新或与开发者联系。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android 6.0 适配 RTL8821CU wifi&amp;BT 功能</title>
    <link href="https://www.litreily.top/2022/07/08/rk3288-bt/"/>
    <id>https://www.litreily.top/2022/07/08/rk3288-bt/</id>
    <published>2022-07-08T09:54:55.000Z</published>
    <updated>2022-07-08T11:02:08.349Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求背景&quot;&gt;&lt;a href=&quot;#需求背景&quot; class=&quot;headerlink&quot; title=&quot;需求背景&quot;&gt;&lt;/a&gt;需求背景&lt;/h2&gt;&lt;p&gt;项目需求，要求添加蓝牙功能，选择的芯片是WIFI&amp;amp;蓝牙二合一的 &lt;code&gt;RTL8821CU&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;为此，需要更新蓝牙和wifi的相关驱动，以及Android系统层的一些配置，同时还要向下兼容旧的wifi芯片 RTL8188EU.&lt;/p&gt;
&lt;h2 id=&quot;相关文件&quot;&gt;&lt;a href=&quot;#相关文件&quot; class=&quot;headerlink&quot; title=&quot;相关文件&quot;&gt;&lt;/a&gt;相关文件&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;# kernel
## config
kernel/arch/arm/configs/rockchip_defconfig
## dts
kernel/arch/arm/boot/dts/rk3288-tb_8846.dts
## wifi
kernel/drivers/net/wireless/rockchip_wlan/rtl8821cu/*
kernel/drivers/net/wireless/rockchip_wlan/rtl8821cu/Makefile
kernel/drivers/net/wireless/rockchip_wlan/wifi_sys</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android 10 系统开发[3] - 结合 gitlab 搭建 repo 代码仓库管理平台</title>
    <link href="https://www.litreily.top/2022/02/24/gitlab-repo/"/>
    <id>https://www.litreily.top/2022/02/24/gitlab-repo/</id>
    <published>2022-02-24T08:26:13.000Z</published>
    <updated>2022-02-24T08:31:43.202Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;目前为了本地服务器搭建 &lt;code&gt;gitlab&lt;/code&gt; 管理平台，并配合 &lt;code&gt;gerrit&lt;/code&gt; 进行代码审查，需要对代码管理重新部署。&lt;/p&gt;
&lt;p&gt;Android 系统使用 &lt;code&gt;repo&lt;/code&gt; 管理源码，但是 &lt;code&gt;Android 10&lt;/code&gt; 源码包含 &lt;code&gt;732&lt;/code&gt; 个仓库，如果在本地 gitlab 服务器和 &lt;code&gt;gerrit&lt;/code&gt; 服务器上将所有的仓库都创建一遍的话，仓库太多了， 不便于管理和审查，所以需要重新设计代码结构，并使用 &lt;code&gt;repo&lt;/code&gt; 和 &lt;code&gt;manifest&lt;/code&gt; 进行管理，为此，我先使用官方 &lt;code&gt;gitlab&lt;/code&gt; 搭建了一些测试仓库。用于学习和研究 &lt;code&gt;repo&lt;/code&gt; 的代码管理方式。&lt;/p&gt;
&lt;h2 id=&quot;gitlab-操作&quot;&gt;&lt;a href=&quot;#gitlab-操作&quot; class=&quot;headerlink&quot; title=&quot;gitlab 操作&quot;&gt;&lt;/a&gt;gitlab 操作&lt;/h2&gt;&lt;h3 id=&quot;新建-group&quot;&gt;&lt;a href=&quot;#新建-group&quot; class=&quot;headerlink&quot; title=&quot;新建 group&quot;&gt;&lt;/a&gt;新建 group&lt;/h3&gt;&lt;p&gt;首先在 &lt;code&gt;gitlab</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="repo" scheme="https://www.litreily.top/tags/repo/"/>
    
    <category term="gitlab" scheme="https://www.litreily.top/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android 10 系统开发[2] - 更新开机logo与动画</title>
    <link href="https://www.litreily.top/2022/02/22/android-ani/"/>
    <id>https://www.litreily.top/2022/02/22/android-ani/</id>
    <published>2022-02-22T01:58:40.000Z</published>
    <updated>2022-02-22T02:03:47.937Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;替换开机logo&quot;&gt;&lt;a href=&quot;#替换开机logo&quot; class=&quot;headerlink&quot; title=&quot;替换开机logo&quot;&gt;&lt;/a&gt;替换开机logo&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;kernel&lt;/code&gt; 目录，将 &lt;code&gt;logo.bmp&lt;/code&gt;, 以及 &lt;code&gt;logo_kernel.bmp&lt;/code&gt; 替换为所需logo即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;logo.bmp: uboot 阶段显示&lt;/li&gt;
&lt;li&gt;logo_kernel.bmp: kernel 阶段显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;替换-Android-开机动画&quot;&gt;&lt;a href=&quot;#替换-Android-开机动画&quot; class=&quot;headerlink&quot; title=&quot;替换 Android 开机动画&quot;&gt;&lt;/a&gt;替换 Android 开机动画&lt;/h2&gt;&lt;h3 id=&quot;替换-bootanimation-zip&quot;&gt;&lt;a href=&quot;#替换-bootanimation-zip&quot; class=&quot;headerlink&quot; title=&quot;替换 bootanimation.zip&quot;&gt;&lt;/a&gt;替换 bootanimation.zip&lt;/h3&gt;&lt;p&gt;&lt;code&gt;rk3288&lt;/code&gt; android10 的动画文件位于 &lt;code&gt;device/rockchip/common&lt;</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
    <category term="rk3288" scheme="https://www.litreily.top/tags/rk3288/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 Android 10 系统开发[1] - 支持 EC20 4G 模块</title>
    <link href="https://www.litreily.top/2022/02/21/android-4g/"/>
    <id>https://www.litreily.top/2022/02/21/android-4g/</id>
    <published>2022-02-21T08:50:51.000Z</published>
    <updated>2022-02-21T09:48:42.921Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;根据业务需求，需要升级安卓系统，从 &lt;code&gt;Android6.0&lt;/code&gt; 升级到 &lt;code&gt;Android10.0&lt;/code&gt;, 本节介绍如何移植 &lt;code&gt;EC20 4G&lt;/code&gt; 模块。&lt;/p&gt;
&lt;p&gt;主要参考 &lt;code&gt;Quetecl&lt;/code&gt; 提供的以下文档。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Quectel_WCDMA&amp;amp;LTE_Linux_USB_Driver_User_Guide_V1.8.pdf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Quectel_Android_RIL_Driver_User_Guide_V1.9.pdf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;kernel&quot;&gt;&lt;a href=&quot;#kernel&quot; class=&quot;headerlink&quot; title=&quot;kernel&quot;&gt;&lt;/a&gt;kernel&lt;/h2&gt;&lt;p&gt;内核部分，需要修改两部分，&lt;code&gt;EC20&lt;/code&gt;模块的使能和供电, 以及 &lt;code&gt;EC20&lt;/code&gt; 联网所需的驱动移植。&lt;/p&gt;
&lt;h3 id=&quot;EC20-供电使能&quot;&gt;&lt;a href=&quot;#EC20-供电使能&quot; class=&quot;headerlink&quot; title=&quot;EC20 供电使能&quot;&gt;&lt;/a&gt;EC20 供电使能&lt;/h3&gt;&lt;p&gt;针对供电使能问题，&lt;code&gt;dts&lt;/code</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
    <category term="rk3288" scheme="https://www.litreily.top/tags/rk3288/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 android 6.0 卡死在开机logo画面问题处理</title>
    <link href="https://www.litreily.top/2022/01/11/rk3288-hang/"/>
    <id>https://www.litreily.top/2022/01/11/rk3288-hang/</id>
    <published>2022-01-11T03:49:02.000Z</published>
    <updated>2022-02-21T08:52:04.167Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;烧录固件后，会概率性出现卡死在开机画面无法启动的问题，但是烧录新固件后会恢复正常。对比不同机型，发现只有带&lt;strong&gt;摄像头功能&lt;/strong&gt;的机型会有这个问题。&lt;/p&gt;
&lt;h2 id=&quot;Root-cause&quot;&gt;&lt;a href=&quot;#Root-cause&quot; class=&quot;headerlink&quot; title=&quot;Root cause&quot;&gt;&lt;/a&gt;Root cause&lt;/h2&gt;&lt;p&gt;经过大量测试和排查，发现卡死问题源自一个文件,  &lt;code&gt;/data/camera/media_profiles.xml&lt;/code&gt; , 这是一个空文件，删除后系统就正常启动了。&lt;/p&gt;
&lt;p&gt;通过使用 &lt;code&gt;logcat&lt;/code&gt; 结合系统源码发现，该文件是摄像头配置文件，如果为空会导致系统循环检测该文件，并尝试从中获取摄像头配置，但是由于文件为空，导致一直获取失败，最后陷入死循环。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ cd /data/camera
$ ls
media_profiles.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;经过排查源码，发现系统在</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
    <category term="rk3288" scheme="https://www.litreily.top/tags/rk3288/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 android 6.0 user release 相关问题处理</title>
    <link href="https://www.litreily.top/2021/12/31/rk3288-security/"/>
    <id>https://www.litreily.top/2021/12/31/rk3288-security/</id>
    <published>2021-12-31T02:58:22.000Z</published>
    <updated>2022-02-21T08:52:09.747Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;之前一直用的 &lt;code&gt;userdebug&lt;/code&gt; 版本，默认 &lt;code&gt;adb root&lt;/code&gt; 或者使用 &lt;code&gt;su&lt;/code&gt; 即可获取 root 权限。目前基于安全考虑，固件发布需要使用 &lt;code&gt;user&lt;/code&gt; 版本配置，很多功能都需要重新测试，下面对 &lt;code&gt;RK3288&lt;/code&gt; &lt;code&gt;user&lt;/code&gt; 发布版本遇到的问题进行总结。&lt;/p&gt;
&lt;h2 id=&quot;编译固件&quot;&gt;&lt;a href=&quot;#编译固件&quot; class=&quot;headerlink&quot; title=&quot;编译固件&quot;&gt;&lt;/a&gt;编译固件&lt;/h2&gt;&lt;p&gt;首先是编译固件，将原先的 &lt;code&gt;rk3288-userdebug&lt;/code&gt; 改为 &lt;code&gt;rk3288-user&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;./FFTools/make.sh -d rk3288-tb_8846 -j16 -l rk3288-user
./FFTools/mkupdate/mkupdate.sh -l rk3288-user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面是 firefly 官方 wiki 文档对 &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;userdebug&lt;/code&gt;, &lt;code&gt;eng&lt;/code&gt; 版本的对比。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
    <category term="rk3288" scheme="https://www.litreily.top/tags/rk3288/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 android 6.0 user release 获取 root 权限</title>
    <link href="https://www.litreily.top/2021/12/30/rk3288-su/"/>
    <id>https://www.litreily.top/2021/12/30/rk3288-su/</id>
    <published>2021-12-30T02:22:18.000Z</published>
    <updated>2022-02-21T08:52:12.711Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;编译 RK3288 &lt;code&gt;user&lt;/code&gt; 版本后，固件不会安装su，也就无法使用root权限，导致很多功能无法调试，非常不便。&lt;/p&gt;
&lt;p&gt;为此，我想办法把 su 重新加到系统里了。&lt;/p&gt;
&lt;h2 id=&quot;准备su&quot;&gt;&lt;a href=&quot;#准备su&quot; class=&quot;headerlink&quot; title=&quot;准备su&quot;&gt;&lt;/a&gt;准备su&lt;/h2&gt;&lt;p&gt;先使用 &lt;code&gt;userdebug&lt;/code&gt; 模式编译系统，将 &lt;code&gt;out/target/product/rk3288/system/xbin/su&lt;/code&gt; 保存到别的地方，因为改用 &lt;code&gt;user&lt;/code&gt; 模式编译后会覆盖掉。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mkdir ~/backup
cp out/target/product/rk3288/system/xbin/su ~/backup/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;删除-su-Android-mk&quot;&gt;&lt;a href=&quot;#删除-su-Android-mk&quot; class=&quot;headerlink&quot; title=&quot;删除 su Android.mk&quot;&gt;&lt;/a&gt;删除 su Android.mk&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;rm system/extras/su/Andro</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
    <category term="rk3288" scheme="https://www.litreily.top/tags/rk3288/"/>
    
  </entry>
  
  <entry>
    <title>RK3399 新设计工控机配置指南</title>
    <link href="https://www.litreily.top/2021/12/20/rk3399-dts/"/>
    <id>https://www.litreily.top/2021/12/20/rk3399-dts/</id>
    <published>2021-12-20T06:20:20.000Z</published>
    <updated>2021-12-21T06:13:50.773Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;用时两周，总算将新的 RK3399 工控机配置好了，期间遇到各种坑，在此记录一二。&lt;/p&gt;
&lt;h2 id=&quot;RK3399-工控机硬件配置&quot;&gt;&lt;a href=&quot;#RK3399-工控机硬件配置&quot; class=&quot;headerlink&quot; title=&quot;RK3399 工控机硬件配置&quot;&gt;&lt;/a&gt;RK3399 工控机硬件配置&lt;/h2&gt;&lt;p&gt;首先看下硬件配置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;接口&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;TypeC&lt;/td&gt;
&lt;td&gt;1个&lt;/td&gt;
&lt;td&gt;OTG 口，可用于烧录固件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USB3.0&lt;/td&gt;
&lt;td&gt;4个&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USB2.0&lt;/td&gt;
&lt;td&gt;2个&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RTC芯片 hym8563&lt;/td&gt;
&lt;td&gt;1个&lt;/td&gt;
&lt;td&gt;用于RTC时钟存储&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SD&lt;/td&gt;
&lt;td&gt;1个&lt;/td&gt;
&lt;td&gt;可插入SD/TF 卡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HDMI&lt;/td&gt;
&lt;td&gt;1个&lt;/td&gt;
&lt;td&gt;可接显示器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;</summary>
      
    
    
    
    <category term="Embedded" scheme="https://www.litreily.top/categories/Embedded/"/>
    
    
    <category term="linux" scheme="https://www.litreily.top/tags/linux/"/>
    
    <category term="rk3399" scheme="https://www.litreily.top/tags/rk3399/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 android 6.0 内置系统应用</title>
    <link href="https://www.litreily.top/2021/10/27/system-app/"/>
    <id>https://www.litreily.top/2021/10/27/system-app/</id>
    <published>2021-10-27T11:02:51.000Z</published>
    <updated>2022-02-21T08:52:22.259Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;安卓系统的内置应用可分为以下两大类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可卸载的普通应用&lt;/li&gt;
&lt;li&gt;不可卸载的系统应用，可以在首次烧录后自启动&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;可卸载应用&quot;&gt;&lt;a href=&quot;#可卸载应用&quot; class=&quot;headerlink&quot; title=&quot;可卸载应用&quot;&gt;&lt;/a&gt;可卸载应用&lt;/h2&gt;&lt;p&gt;对于可卸载应用，其内置很简单，只需要将apk文件放置在指定目录即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cp My_application.apk device/rockchip/rk3288/preinstall_del/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;不可卸载应用&quot;&gt;&lt;a href=&quot;#不可卸载应用&quot; class=&quot;headerlink&quot; title=&quot;不可卸载应用&quot;&gt;&lt;/a&gt;不可卸载应用&lt;/h2&gt;&lt;p&gt;针对不可卸载的系统应用，复杂一些，需要放置在 &lt;code&gt;packages/apps&lt;/code&gt; 目录，具体操作如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;apk_file=My_application.apk
install_dir=packages/apps/$&amp;#123;apk_file&amp;#125;
mkdir $&amp;#123;install_dir&amp;#125;
cp $&amp;#123;ap</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="linux" scheme="https://www.litreily.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>解压并更新 ramdisk.img 或 initrd.img</title>
    <link href="https://www.litreily.top/2021/07/31/ramdisk/"/>
    <id>https://www.litreily.top/2021/07/31/ramdisk/</id>
    <published>2021-07-31T06:03:20.000Z</published>
    <updated>2021-07-31T06:18:36.245Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;ramdisk.img&lt;/code&gt; 或者 &lt;code&gt;initrd.img&lt;/code&gt; 是类似的，都是一个小型的文件系统。在系统启动过程中起到引导的作用，内核通过它来启动真正的根文件系统。&lt;/p&gt;
&lt;p&gt;有时候需要修改并更新这个文件，下面以&lt;code&gt;ramdisk.img&lt;/code&gt; 为例进行说明。&lt;/p&gt;
&lt;h2 id=&quot;解压-ramdisk-img&quot;&gt;&lt;a href=&quot;#解压-ramdisk-img&quot; class=&quot;headerlink&quot; title=&quot;解压 ramdisk.img&quot;&gt;&lt;/a&gt;解压 ramdisk.img&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ramdisk.img&lt;/code&gt; 其实是一个&lt;code&gt;gz&lt;/code&gt;格式的压缩包，可以通过 &lt;code&gt;gzip -d&lt;/code&gt; 或者 &lt;code&gt;gunzip&lt;/code&gt; 解压，不过需要注意的是 &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;gunzip&lt;/code&gt; 会检查文件名后缀，所以需要先将后缀更新为 &lt;code&gt;.gz&lt;/code&gt;. 下面将其解压至新建的 &lt;code&gt;root&lt;/code&gt; 目录。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ cp ramdisk.img ramdisk.gz
$ gzip -d ramdisk.gz
$ mkdir root
</summary>
      
    
    
    
    <category term="Embedded" scheme="https://www.litreily.top/categories/Embedded/"/>
    
    
    <category term="linux" scheme="https://www.litreily.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 android 6.0 移植 gt9xx 驱动</title>
    <link href="https://www.litreily.top/2021/07/16/gt9xx-drvier/"/>
    <id>https://www.litreily.top/2021/07/16/gt9xx-drvier/</id>
    <published>2021-07-16T05:49:36.000Z</published>
    <updated>2022-02-21T08:52:30.995Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;平台：RK3288&lt;/li&gt;
&lt;li&gt;系统：Android 6.0&lt;/li&gt;
&lt;li&gt;需求：触摸屏驱动移植&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;驱动移植&quot;&gt;&lt;a href=&quot;#驱动移植&quot; class=&quot;headerlink&quot; title=&quot;驱动移植&quot;&gt;&lt;/a&gt;驱动移植&lt;/h2&gt;&lt;p&gt;先从厂商获取驱动程序 gt9xx_v2.8.0.2.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;gt9xx_v2.8.0.2
├── dtsi
│   ├── gt9xx_dts.txt
│   ├── pinctrl_mtk.txt
│   └── pinctrl_qcom.txt
├── goodix_tool.c
├── gt9xx.c
├── gt9xx.h
├── gt9xx_update.c
├── Kconfig
└── Makefile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新建目录 &lt;code&gt;drivers/input/touchscreen/gt9xx_v2.8.0.2/&lt;/code&gt; ,将以上 &lt;code&gt;.c&lt;/code&gt;, &lt;code&gt;.h&lt;/code&gt;, 及 &lt;code&gt;Makefile&lt;/cod</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
    <category term="rk3288" scheme="https://www.litreily.top/tags/rk3288/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 android 6.0 同时打开两个摄像头</title>
    <link href="https://www.litreily.top/2021/07/12/dual-camera/"/>
    <id>https://www.litreily.top/2021/07/12/dual-camera/</id>
    <published>2021-07-12T10:02:15.000Z</published>
    <updated>2022-02-21T08:52:33.715Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;平台: RK3288&lt;/li&gt;
&lt;li&gt;系统: Android 6.0&lt;/li&gt;
&lt;li&gt;需求: 同时打开两个摄像头&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;业务需求，要支持同时打开多个摄像头，期间遇到一些问题，在这里记录下。&lt;/p&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h2&gt;&lt;h3 id=&quot;支持多摄像头&quot;&gt;&lt;a href=&quot;#支持多摄像头&quot; class=&quot;headerlink&quot; title=&quot;支持多摄像头&quot;&gt;&lt;/a&gt;支持多摄像头&lt;/h3&gt;&lt;p&gt;首先，Android系统默认只支持同时打开一个摄像头，并且最大只识别两个摄像头。所以，为了支持多摄像头，需要修改摄像头相关的 &lt;code&gt;HAL&lt;/code&gt; 层。&lt;/p&gt;
&lt;p&gt;这个我参考 &lt;a href=&quot;https://www.programmersought.com/article/12481783276/&quot;&gt;[AndroidO] [RK3399] Support 4 way camera preview&lt;/a&gt; 解决了。patch 如下：&lt;/p&gt;
&lt;pre&gt;&lt;code c</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
    <category term="rk3288" scheme="https://www.litreily.top/tags/rk3288/"/>
    
  </entry>
  
  <entry>
    <title>RK3288 android 6.0 实现 lvds + edp 双屏异显</title>
    <link href="https://www.litreily.top/2021/06/18/dual-lcd/"/>
    <id>https://www.litreily.top/2021/06/18/dual-lcd/</id>
    <published>2021-06-18T08:23:15.000Z</published>
    <updated>2022-02-21T08:52:36.131Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;rk3288&lt;/code&gt; 默认支持 edp+hdmi 双屏显示，或者 lvds + hdmi, 但不支持 &lt;code&gt;lvds&lt;/code&gt; + &lt;code&gt;edp&lt;/code&gt; 双屏异显。业务要求，需要使用RK3288 Android 6.0 系统，支持 &lt;code&gt;lvds&lt;/code&gt;, &lt;code&gt;edp&lt;/code&gt; 两种接口的双屏异显。本文介绍具体的实现方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台: RK3288&lt;/li&gt;
&lt;li&gt;系统: Android 6.0&lt;/li&gt;
&lt;li&gt;屏幕: LVDS(7 inch 1024x600), edp(11 inch 1920x1080)&lt;/li&gt;
&lt;li&gt;需求: LVDS (Primary) + edp (EXTEND) 双屏异显&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt; 主屏副屏的切换只要修改dts相关参数即可，&lt;code&gt;lvds&lt;/code&gt; &lt;code&gt;edp&lt;/code&gt; 主副互换比较简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;kernel&quot;&gt;&lt;a href=&quot;#kernel&quot; class=&quot;headerlink&quot; title=&quot;kernel&quot;&gt;&lt;/a&gt;kernel&lt;/h2&gt;&lt;p&gt;首先修改 &lt;code&gt;kernel&lt;/code&gt;, 这里参考了博客&lt;a href=&quot;https:</summary>
      
    
    
    
    <category term="Android" scheme="https://www.litreily.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://www.litreily.top/tags/android/"/>
    
    <category term="rk3288" scheme="https://www.litreily.top/tags/rk3288/"/>
    
  </entry>
  
  <entry>
    <title>解决Ubuntu 18.04 minicom 不支持 1500000 波特率的问题</title>
    <link href="https://www.litreily.top/2021/05/28/cp210x/"/>
    <id>https://www.litreily.top/2021/05/28/cp210x/</id>
    <published>2021-05-28T03:26:15.000Z</published>
    <updated>2021-05-28T03:31:18.046Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近使用 &lt;code&gt;Ubuntu 18.04&lt;/code&gt; 作为台式机的办公系统，需要使用串口调试功能，于是安装了 &lt;code&gt;minicom&lt;/code&gt;, 但是配置波特率的时候发现无法配置高于 &lt;code&gt;1000000&lt;/code&gt; 以上波特率。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ sudo stty -F /dev/ttyUSB0 1500000
stty: /dev/ttyUSB0: unable to perform all requested operations
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Embedded" scheme="https://www.litreily.top/categories/Embedded/"/>
    
    
    <category term="ubuntu" scheme="https://www.litreily.top/tags/ubuntu/"/>
    
    <category term="usb" scheme="https://www.litreily.top/tags/usb/"/>
    
  </entry>
  
  <entry>
    <title>基于 IPQ807x 编译 QSDK</title>
    <link href="https://www.litreily.top/2021/02/07/qsdk-compile/"/>
    <id>https://www.litreily.top/2021/02/07/qsdk-compile/</id>
    <published>2021-02-07T06:19:04.000Z</published>
    <updated>2021-05-28T03:12:11.503Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;接上一篇 &lt;a href=&quot;https://www.litreily.top/2021/01/29/qsdk/&quot;&gt;下载安装基于 openwrt 的 QSDK&lt;/a&gt;,  这一篇来讲下编译 &lt;code&gt;QSDK&lt;/code&gt; 的步骤以及遇到的问题及其处理方法。&lt;/p&gt;
&lt;p&gt;正常步骤，是下面这样的，根据设备类型选择 config 文件，生成 .config, 然后完整编译。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cp qca/configs/qsdk/ipq_open.config .config
echo  CONFIG_TARGET_ipq_ipq807x_64=y  &amp;gt;&amp;gt; .config
echo CONFIG_TARGET_ipq_ipq807x_64_QSDK_Open=y  &amp;gt;&amp;gt; .config

make package/symlinks
make defconfig
make V=s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;make V=s&lt;/code&gt; 之前的指令都能正常通过，但是编译过程中就可能出现各种情况，比如缺少编译工具等。&lt;/p&gt;
&lt;h2 id=&quot;依赖工具&quot;&gt;&lt;a href=&quot;#依赖工具&quot; class=&quot;headerlink&quot; title=&quot;依赖工具&quot;&gt;&lt;/a&gt;依赖工具&lt;/h2&gt;&lt;p&gt;每个人的编译环境可能</summary>
      
    
    
    
    <category term="Embedded" scheme="https://www.litreily.top/categories/Embedded/"/>
    
    
    <category term="openwrt" scheme="https://www.litreily.top/tags/openwrt/"/>
    
    <category term="qsdk" scheme="https://www.litreily.top/tags/qsdk/"/>
    
  </entry>
  
  <entry>
    <title>下载安装基于 openwrt 的 QSDK</title>
    <link href="https://www.litreily.top/2021/01/29/qsdk/"/>
    <id>https://www.litreily.top/2021/01/29/qsdk/</id>
    <published>2021-01-29T09:29:56.000Z</published>
    <updated>2021-05-28T03:12:11.503Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;QSDK&lt;/code&gt; - QCA Software Development Kits, 基于 openwrt 加入了 QCA 相关的代码库，可以用于使用 qualcomm 芯片的路由器固件开发。本文讲述如何获取 QSDK.&lt;/p&gt;
&lt;p&gt;我们通常会使用 &lt;code&gt;git clone&lt;/code&gt; 获取开源项目的代码，比如 github, gitlab, coding 等平台，但是 &lt;code&gt;QSDK&lt;/code&gt; 并不存放于这些平台，而是有它自己的维护站点，并且需要通过 &lt;code&gt;repo&lt;/code&gt; 和 &lt;code&gt;git&lt;/code&gt; 共同完成仓库文件的 &lt;code&gt;clone&lt;/code&gt;, 下面来看看吧。&lt;/p&gt;
&lt;h2 id=&quot;install-repo&quot;&gt;&lt;a href=&quot;#install-repo&quot; class=&quot;headerlink&quot; title=&quot;install repo&quot;&gt;&lt;/a&gt;install repo&lt;/h2&gt;&lt;p&gt;首先来安装 &lt;code&gt;repo&lt;/code&gt; 工具，这其实是个 &lt;code&gt;Python&lt;/code&gt; 脚本.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;curl https://storage.googleapis.com/git-repo-downloads/repo -o repo
chmod +x</summary>
      
    
    
    
    <category term="Embedded" scheme="https://www.litreily.top/categories/Embedded/"/>
    
    
    <category term="openwrt" scheme="https://www.litreily.top/tags/openwrt/"/>
    
    <category term="qsdk" scheme="https://www.litreily.top/tags/qsdk/"/>
    
  </entry>
  
  <entry>
    <title>openwrt Makefile scan.mk 详解</title>
    <link href="https://www.litreily.top/2021/01/15/mk-scan/"/>
    <id>https://www.litreily.top/2021/01/15/mk-scan/</id>
    <published>2021-01-15T08:22:51.000Z</published>
    <updated>2021-05-28T03:12:11.503Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;openwrt&lt;/code&gt; 中的 &lt;code&gt;include/scan.mk&lt;/code&gt; 用于扫描项目 &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;target&lt;/code&gt; 目录信息，并将扫描结果存入 &lt;code&gt;tmp&lt;/code&gt; 目录。这个扫描过程几乎是 openwrt 所有目标生成的前提。也就是说，无论使用 &lt;code&gt;make&lt;/code&gt; 编译 &lt;code&gt;openwrt&lt;/code&gt; 哪个部分的代码，都会通过 &lt;code&gt;scan.mk&lt;/code&gt; 生成必要的临时文件，这是编译其它目录的大前提。&lt;/p&gt;
&lt;p&gt;举例说明，我们指定编译某个 &lt;code&gt;package&lt;/code&gt; 时，如 &lt;code&gt;package/utils/demo&lt;/code&gt;，&lt;code&gt;make&lt;/code&gt; 根据层层 &lt;code&gt;Makefile&lt;/code&gt; 会去寻找该 &lt;code&gt;package&lt;/code&gt; 的路径，而这个路径信息就是通过 &lt;code&gt;scan.mk&lt;/code&gt; 扫描后存入了 &lt;code&gt;tmp&lt;/code&gt; 目录。这样有什么好处呢? 我完全可以手动执行 &lt;code&gt;make package/utils/demo/compile&lt;/code&gt; 不是吗？&lt;/p&gt;
&lt;p&gt;的确如此，但是我们不可能每次都去写长串的路径，通过 &lt;code&gt;</summary>
      
    
    
    
    <category term="Embedded" scheme="https://www.litreily.top/categories/Embedded/"/>
    
    
    <category term="makefile" scheme="https://www.litreily.top/tags/makefile/"/>
    
    <category term="openwrt" scheme="https://www.litreily.top/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>openwrt Makefile subdir.mk 详解</title>
    <link href="https://www.litreily.top/2021/01/13/mk-subdir/"/>
    <id>https://www.litreily.top/2021/01/13/mk-subdir/</id>
    <published>2021-01-13T08:25:37.000Z</published>
    <updated>2021-05-28T03:12:11.503Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;之前讲述了 openwrt Makefile 的&lt;a href=&quot;https://www.litreily.top/2020/12/30/openwrt-mkfile/&quot;&gt;整体框架&lt;/a&gt;，主要包括主 Makefile 的描述，，最后简单描述了 &lt;code&gt;subdir.mk&lt;/code&gt; , 本文就来详细剖析这个文件。&lt;/p&gt;
&lt;p&gt;但是在解析 &lt;code&gt;subdir.mk&lt;/code&gt; 之前，先来看两个 Makefile, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug.mk&lt;/code&gt;: 这也是主 Makefile 引入的第一个 .mk 文件，这里定义的调试函数在 &lt;code&gt;subdir.mk&lt;/code&gt; 中被调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target/Makefile&lt;/code&gt;: 这是调用到 &lt;code&gt;subdir.mk&lt;/code&gt; 的首个 Makefile, 本文将以此为例进行说明&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;debug-mk&quot;&gt;&lt;a href=&quot;#debug-mk&quot; class=&quot;headerlink&quot; title=&quot;debug.mk&quot;&gt;&lt;/a&gt;debug.mk&lt;/h2&gt;&lt;p&gt;&lt;code&gt;debug.mk&lt;/code&gt; 定义了几个调试函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;co</summary>
      
    
    
    
    <category term="Embedded" scheme="https://www.litreily.top/categories/Embedded/"/>
    
    
    <category term="makefile" scheme="https://www.litreily.top/tags/makefile/"/>
    
    <category term="openwrt" scheme="https://www.litreily.top/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>openwrt Makefile 框架分析</title>
    <link href="https://www.litreily.top/2020/12/30/openwrt-mkfile/"/>
    <id>https://www.litreily.top/2020/12/30/openwrt-mkfile/</id>
    <published>2020-12-30T00:49:20.000Z</published>
    <updated>2021-05-28T03:12:11.503Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;openwrt repo: &lt;a href=&quot;https://github.com/openwrt/openwrt&quot;&gt;https://github.com/openwrt/openwrt&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;整体框架&quot;&gt;&lt;a href=&quot;#整体框架&quot; class=&quot;headerlink&quot; title=&quot;整体框架&quot;&gt;&lt;/a&gt;整体框架&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/openwrt/openwrt_arch.png&quot; alt=&quot;openwrt arch&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首行为buildroot默认目录&lt;ul&gt;
&lt;li&gt;config: 配置文件&lt;/li&gt;
&lt;li&gt;include: openwrt 的 Makefile 文件&lt;/li&gt;
&lt;li&gt;package: 各个软件包的Makefile, patches等文件&lt;/li&gt;
&lt;li&gt;scripts: openwrt 包管理相关的 perl 脚本&lt;/li&gt;
&lt;li&gt;target: 用于编译 kernel 和 firmware 的相关文件&lt;/li&gt;
&lt;li&gt;toolchain: 包含用于获取 kernel headers, C lib, bin-utils, compiler, debugger 的指令&lt;/li&gt;
&lt;li&gt;tools: 包含编译时所需的一些工具，如automake, autoco</summary>
      
    
    
    
    <category term="Embedded" scheme="https://www.litreily.top/categories/Embedded/"/>
    
    
    <category term="makefile" scheme="https://www.litreily.top/tags/makefile/"/>
    
    <category term="openwrt" scheme="https://www.litreily.top/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>openwrt make defconfig 详解</title>
    <link href="https://www.litreily.top/2020/12/29/make-defconfig/"/>
    <id>https://www.litreily.top/2020/12/29/make-defconfig/</id>
    <published>2020-12-29T01:47:32.000Z</published>
    <updated>2021-05-28T03:12:11.503Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;对于 linux kernel，有几个常用 make 指令用于生成 .config 文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make oldconfig&lt;/li&gt;
&lt;li&gt;make menuconfig&lt;/li&gt;
&lt;li&gt;make defconfig&lt;/li&gt;
&lt;li&gt;make config&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么这些指令具体执行了什么操作呢，针对 openwrt 来看下吧。&lt;/p&gt;
&lt;h2 id=&quot;主-Makefile&quot;&gt;&lt;a href=&quot;#主-Makefile&quot; class=&quot;headerlink&quot; title=&quot;主 Makefile&quot;&gt;&lt;/a&gt;主 Makefile&lt;/h2&gt;&lt;p&gt;在 buildroot 执行 make，首先会访问仓库根目录的主 &lt;a href=&quot;https://github.com/openwrt/openwrt/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt;，其中有个 ifneq 判断如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;makefile&quot;&gt;ifneq ($(OPENWRT_BUILD),1)
  _SINGLE=export MAKEFLAGS=$(space);

  override OPENWRT_BUILD=1
  export OPENWRT_BUILD
  GREP_OPTIONS=
  expor</summary>
      
    
    
    
    <category term="Embedded" scheme="https://www.litreily.top/categories/Embedded/"/>
    
    
    <category term="makefile" scheme="https://www.litreily.top/tags/makefile/"/>
    
    <category term="openwrt" scheme="https://www.litreily.top/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>lua 高级特性</title>
    <link href="https://www.litreily.top/2020/12/25/lua-adv/"/>
    <id>https://www.litreily.top/2020/12/25/lua-adv/</id>
    <published>2020-12-25T02:08:01.000Z</published>
    <updated>2021-05-28T03:12:11.503Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇来记录下 lua 的某些高级特性，以便在实际应用中得心应手。&lt;/p&gt;
&lt;h2 id=&quot;模块和包&quot;&gt;&lt;a href=&quot;#模块和包&quot; class=&quot;headerlink&quot; title=&quot;模块和包&quot;&gt;&lt;/a&gt;模块和包&lt;/h2&gt;&lt;p&gt;为了方便代码复用和扩展，可以使用 table 实现模块 module，在模块中封装通用代码。把同类型的函数放在一个文件中，然后在其它脚本中调用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;module = &amp;#123;&amp;#125;

module.version = &amp;quot;V0.1&amp;quot;
module.author = &amp;quot;litreily&amp;quot;

function module.func1 ()
    function-body
end

function module.func2 ()
    function-body
end

return module
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在其它文件通过 require 导入。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;require (&amp;quot;module&amp;quot;)
-- or
require &amp;quot;module&amp;quot;

print(module.version)
module.func1()

-- or
loc</summary>
      
    
    
    
    <category term="Language" scheme="https://www.litreily.top/categories/Language/"/>
    
    <category term="Lua" scheme="https://www.litreily.top/categories/Language/Lua/"/>
    
    
    <category term="lua" scheme="https://www.litreily.top/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>lua 基本语法</title>
    <link href="https://www.litreily.top/2020/12/24/lua-basic/"/>
    <id>https://www.litreily.top/2020/12/24/lua-basic/</id>
    <published>2020-12-24T03:19:14.000Z</published>
    <updated>2021-05-28T03:12:11.503Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;h3 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;lua&quot;&gt;-- single line comment

--[[
    mutil line comments
]]
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Language" scheme="https://www.litreily.top/categories/Language/"/>
    
    <category term="Lua" scheme="https://www.litreily.top/categories/Language/Lua/"/>
    
    
    <category term="lua" scheme="https://www.litreily.top/tags/lua/"/>
    
  </entry>
  
</feed>
